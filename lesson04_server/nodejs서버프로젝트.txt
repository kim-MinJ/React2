C:\Class250615\React2\lesson04_server>cd.. 

C:\Class250615\React2\lesson04_server>mkdir lesson04_server

C:\Class250615\React2\lesson04_server>cd lesson04_server    

프로젝트 초기화
C:\Class250615\React2\lesson04_server>npm init -y 
(=> package.json)

필요한 패키지 설치
C:\Class250615\React2\lesson04_server>npm install express mongodb cors
(=> node_modules)

프로젝트 실행 도구 설치 (서버 코드 변경시 알아서 재시작)
C:\Class250615\React2\lesson04_server>npm install -g nodemon

프로젝트 실행
C:\Class250615\React\lesson04_server>nodemon webserver.js


API 라우팅 테스트

1. 모든 todo 데이터 조회 : GET 방식, http://localhost:5000/api/todos 주소
(브라우저에서 직접 주소 입력하여 실행)
  curl -X GET http://localhost:5000/api/todos
(-X GET 생략 가능. curl 명령에서 메소드 기본값)

2. 새로운 todo 데이터 추가 : POST 방식. http://localhost:5000/api/todos 주소
(브라우저에서 테스트 못함. why? db에게 보낼 데이터 작성해야하므로.
 => curl 명령어로 테스트)

curl -X POST http://localhost:5000/api/todos ^
       -H "Content-Type: application/json" ^
       -d "{\"text\":\"데이터베이스 테스트\"}"

3. 기존 todo 데이터의 checked 속성 수정 : PUT 방식. 단, url로 id 값 지정하는 방식

curl -X PUT http://localhost:5000/api/todos/3 ^
  -H "Content-Type: application/json" ^
  -d "{\"checked\": false}"

  curl -X PUT http://localhost:5000/api/todos/3 ^
  -H "Content-Type: application/json" ^
  -d "{\"id\": 8}"

  curl -X PUT http://localhost:5000/api/todos/3 ^
  -H "Content-Type: application/json" ^
  -d "{\"checked\": false, \"id\": 8}"

  4. 기존 todo 데이터 삭제 : DELETE 방식. 단, url로 id 값 지정하는 방식
  curl -X DELETE http://localhost:5000/api/todos/3